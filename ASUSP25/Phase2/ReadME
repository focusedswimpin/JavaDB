# HW2: Question and Answer CRUD Application

## Introduction
This repository contains the **HW2 standalone Java application**, which implements **Create, Read, Update, and Delete (CRUD)** operations along with **input validation** for handling **questions and answers**. 

The project is designed based on the **provided foundational materials**, previous assignments (**HW1, TP1**), and insights gained from **Ed Discussion**. 

It includes:
- A `Question` class
- An `Answer` class
- A `Questions` class to store and manage all questions
- An `Answers` class to store and manage all answers

## Features
‚úî Supports CRUD operations for **questions and answers**  
‚úî Implements **input validation** for realistic data handling  
‚úî Stores subsets of questions and answers dynamically  
‚úî Uses **Test-Driven Development (TDD)** with well-documented test cases  
‚úî Provides **UML Class Diagrams** and a **Sequence Diagram**  
‚úî Built as a **Java Console Application**  

---

## Table of Contents
- [Project Structure](#project-structure)
- [User Stories](#user-stories)
- [Installation and Setup](#installation-and-setup)
- [Usage](#usage)
- [Test Cases](#test-cases)
- [UML Diagrams](#uml-diagrams)
- [Screencast](#screencast)
- [GitHub Repository](#github-repository)
- [Grading Information](#grading-information)

---

## Project Structure

---

## User Stories
### 1Ô∏è‚É£ CRUD Operations for Questions and Answers
- As a **user**, I want to **create, read, update, and delete** questions.
- As a **user**, I want to **create, read, update, and delete** answers to questions.
- As a **user**, I want **validation** to ensure that **questions and answers are not empty or invalid**.

### 2Ô∏è‚É£ Handling Lists of Questions and Answers
- As a **user**, I want to store **all** current questions.
- As a **user**, I want to filter and retrieve **a subset of questions** based on a search.
- As a **user**, I want to store **all answers** linked to questions.
- As a **user**, I want to retrieve **a subset of answers** based on filtering.

### 3Ô∏è‚É£ Input Validation
- As a **user**, I should not be able to enter a **blank or duplicate** question.
- As a **user**, I should not be able to enter an **answer that is too short or invalid**.
- As a **user**, I should receive **error messages** for invalid inputs.

---

## Installation and Setup
### Prerequisites
- Java 17+ installed
- Maven (if using)
- Git (for cloning repository)

### Steps
1. Clone the repository:
   ```sh
   git clone <YOUR_GITHUB_REPO_URL>
   cd HW2

2. Compile the Project:
   ```sh
  javac -d bin src/main/App.java


3. Run the Application:

  java -cp bin main.App

Test Cases

‚úÖ Positive Test Cases

Adding a valid question should succeed.

Adding a valid answer should succeed.

Listing all questions and answers should return valid data.

Updating existing questions and answers should reflect changes.

Deleting existing questions and answers should remove them.

‚ùå Negative Test Cases

Adding a blank question should trigger an error.

Adding an empty answer should trigger an error.

Updating a non-existent question should fail.

Deleting a non-existent question should fail.

Entering duplicate questions should be prevented.

Run all tests:

javac -cp .:junit-4.13.2.jar:hamcrest-core-1.3.jar -d bin src/tests/*.java
java -cp .:bin:junit-4.13.2.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore tests.QuestionTest





Screencast

A screencast demonstrating the application, its features, and test cases is available:

üé• Screencast Link: 

Author:

üìå Name: Tejas Sharma
üìå ASU ID: 1229168306
üìå Course: CSE 360 
üìå Date: 11th Feb, 2025



License:

This project is for educational purposes and is not to be copied by others. Ensure that your submission follows academic integrity policies.
